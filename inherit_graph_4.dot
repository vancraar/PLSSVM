digraph "Graphical Class Hierarchy"
{
 // LATEX_PDF_SIZE
  edge [fontname="Helvetica",fontsize="10",labelfontname="Helvetica",labelfontsize="10"];
  node [fontname="Helvetica",fontsize="10",shape=record];
  rankdir="LR";
  Node30 [label="std::runtime_error",height=0.2,width=0.4,color="grey75", fillcolor="white", style="filled",tooltip=" "];
  Node30 -> Node0 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node0 [label="plssvm::exception",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classplssvm_1_1exception.html",tooltip="Base class for all custom exception types. Forwards its message to std::runtime_error and saves the e..."];
  Node0 -> Node1 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node1 [label="plssvm::cuda::backend\l_exception",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classplssvm_1_1cuda_1_1backend__exception.html",tooltip="Exception type thrown if a problem with the CUDA backend occurs."];
  Node0 -> Node2 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node2 [label="plssvm::file_not_found\l_exception",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classplssvm_1_1file__not__found__exception.html",tooltip="Exception type thrown if the provided file couldn't be found."];
  Node0 -> Node3 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node3 [label="plssvm::invalid_file\l_format_exception",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classplssvm_1_1invalid__file__format__exception.html",tooltip="Exception type thrown if the provided file has an invalid format for the selected parser (e...."];
  Node0 -> Node4 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node4 [label="plssvm::opencl::backend\l_exception",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classplssvm_1_1opencl_1_1backend__exception.html",tooltip="Exception type thrown if a problem with the OpenCL backend occurs."];
  Node0 -> Node5 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node5 [label="plssvm::openmp::backend\l_exception",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classplssvm_1_1openmp_1_1backend__exception.html",tooltip="Exception type thrown if a problem with the OpenMP backend occurs."];
  Node0 -> Node6 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node6 [label="plssvm::sycl::backend\l_exception",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classplssvm_1_1sycl_1_1backend__exception.html",tooltip="Exception type thrown if a problem with the SYCL backend occurs."];
  Node0 -> Node7 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node7 [label="plssvm::unsupported\l_backend_exception",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classplssvm_1_1unsupported__backend__exception.html",tooltip="Exception type thrown if the requested backend is not supported on the target machine."];
  Node0 -> Node8 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node8 [label="plssvm::unsupported\l_kernel_type_exception",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classplssvm_1_1unsupported__kernel__type__exception.html",tooltip="Exception type thrown if the requested kernel type is not supported."];
}
